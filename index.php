<?php
use core\system\app;

require_once __DIR__ . '/core/system/autoload.php';

App::run();

?>

<?php
/**
 * @todo перенести layout в core - возможно
 * @todo Сообщения message об ошибках (таких как - страница не была создана)
 * @todo Нужно больше ексепшенов
 * @todo Сделать так, чтобы когда валедация не перегружена - она бы позволяла сохранять данные
 * @todo Сообщения при валидации наименование полей проводить через label. А то сейчас в сообщении отображается чистые наименования полей (как в бд)
 * @todo Роли для пользователей
 * @todo Профайл пользователя
 * @todo Связи таблиц (realtion). Грамотно настроить виды связей
 * @todo Капча для пользователей при регистрации
 * @todo Забыл пароль
 * @todo Проверка данных на клиенте (http://1000hz.github.io/bootstrap-validator/)
 * @todo Ajax реализация
 * @todo разрешить пользователю валидировать данные используя свои регулярки
 * @todo Расширить модель методом join
 * @todo Идея реализовать собственные урлы для модулей, которые будут замещать существующие (в конф файле модуля)
 * @todo Мультиязычность
 * @todo Модуль меню, который был бы связан с моделем блоки
 * @todo Комментарии
 * @todo Система блоков
 * @todo Зацепить групы инпутов на форму авторизации
 * @todo Все заголовки сделать по паттерну будстрапа
 * @todo Если в save передать false, валидация происходить не будет
 * @todo К модулю users прикрепить проверук уникальности email
 * @todo валидатор уникальности
 * @todo SysAuth getRole
 * @todo сделать установку фраемворка (чтобы при установке инициализировались все необходимые модули и таблицы)
 * @todo пагинация
 * @todo Ассеты для модулей
 *
 * Замечания:
 * Таблицы users, roles - обязательны, но в конфигурационном файле наименование можно поменять.
 * Фраемворк работает с ними напрямую. Откуда ж тогда брать проверки ролей
 * и пользователей
 */
?>